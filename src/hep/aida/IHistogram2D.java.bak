package hep.aida;

/**
 * A Java interface corresponding to the AIDA 2D Histogram.
 * <p> 
 * <b>Note</b> All methods that accept a bin number as an argument will
 * also accept the constants OVERFLOW or UNDERFLOW as the argument, and 
 * as a result give the contents of the resulting OVERFLOW or UNDERFLOW
 * bin.
 * @see <a href="http://wwwinfo.cern.ch/asd/lhc++/AIDA/">AIDA</a>
 */
public interface IHistogram2D extends IHistogram
{
  /**
   * Get the number of entries 
   * (ie the number of times fill was called for this bin)
   * @param indexX the x bin number (0...Nx-1) or OVERFLOW or UNDERFLOW
   * @param indexY the y bin number (0...Ny-1) or OVERFLOW or UNDERFLOW
   */
  public int binEntries(int indexX, int indexY );    
  /**
   * Equivalent to projectionX().binEntries(indexX);
   */
  public int binEntriesX(int indexX);    
  /**
   * Equivalent to projectionY().binEntries(indexY);
   */
  public int binEntriesY(int indexY);    
  /**
   * The error on this bin
   * @param indexX the x bin number (0...Nx-1) or OVERFLOW or UNDERFLOW
   * @param indexY the y bin number (0...Ny-1) or OVERFLOW or UNDERFLOW
   */ 
  public double binError(int indexX,int indexY );    
  /**
   * Total height of the corresponding bin (ie the sum of the weights
   * in this bin).
   * @param indexX the x bin number (0...Nx-1) or OVERFLOW or UNDERFLOW
   * @param indexY the y bin number (0...Ny-1) or OVERFLOW or UNDERFLOW
   */ 
  public double binHeight(int indexX,int indexY );    
  /**
   * Equivalent to projectionX().binHeight(indexX);
   */
  public double binHeightX(int indexX);    
  /**
   * Equivalent to projectionY().binHeight(indexY);
   */
  public double binHeightY(int indexY);    
  /**
   * Convenience method, equivalent to xAxis().coordToIndex(coord);
   * @see IAxis#coordToIndex(double)
   */  
  public int coordToIndexX(double coordX);    
  /**
   * Convenience method, equivalent to yAxis().coordToIndex(coord);
   * @see IAxis#coordToIndex(double)
   */  
  public int coordToIndexY(double coordY);    
  /**
   * Fill the histogram with weight 1
   */
  public void fill( double x, double y);    
  /**
   * Fill the histogram with specified weight
   */
  public void fill( double x, double y, double weight);    
  /// ==========================================================================
  /// Statistics
  /// ==========================================================================

  /**
   *  Returns the mean of the whole histogram
   *  as calculated on filling-time projected on the X axis
   */ 
  public double meanX();    
  /**
   *  Returns the mean of the whole histogram
   *  as calculated on filling-time projected on the Y axis
   */ 
  public double meanY();    
  /**
   * Create a projection parallel to the X axis.
   * Equivalent to sliceX(UNDERFLOW,OVERFLOW);
   */
  public IHistogram1D projectionX();    
  /**
   * Create a projection parallel to the Y axis.
   * Equivalent to sliceY(UNDERFLOW,OVERFLOW);
   */
  public IHistogram1D projectionY();    
  /**
   * Returns the rms of the whole histogram
   * as calculated on filling-time projected on the X axis
   */
  public double rmsX();    
  /**
   * Returns the rms of the whole histogram
   * as calculated on filling-time projected on the Y axis
   */
  public double rmsY();    
  /// ==========================================================================
  /// The following members can all be derived from the entries above,
  /// but are possibly useful as convenience functions.
  /// ==========================================================================

  /**
   * Slice parallel to the Y axis at bin indexY and one bin wide.
   * Equivalent to sliceX(indexY,indexY);
   */
  public IHistogram1D sliceX(int indexY );    
  /// ==========================================================================
  /// Projections and Slices
  /// ==========================================================================


  /**
   * Create a slice parallel to the axis X axis, between "indexY1" and "indexY2" (inclusive).
   * The returned IHistogram1D represents an instantaneous snapshot of the
   * histogram at the time the slice was created.
   */ 
  public IHistogram1D sliceX(int indexY1, int indexY2);    
  /**
   * Slice parallel to the X axis at bin indexX and one bin wide.
   * Equivalent to sliceY(indexX,indexX);
   */
  public IHistogram1D sliceY(int indexX );    
  /**
   * Create a slice parallel to the axis Y axis, between "indexX1" and "indexX2" (inclusive)
   * The returned IHistogram1D represents an instantaneous snapshot of the
   * histogram at the time the slice was created.
   */ 
  public IHistogram1D sliceY(int indexX1, int indexX2);    
  /**
   * Get the X axis
   */
  public IAxis xAxis();    
  /**
   * Get the Y axis
   */
  public IAxis yAxis();    
}
