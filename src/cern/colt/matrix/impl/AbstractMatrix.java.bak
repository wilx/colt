package cern.colt.matrix.impl;

/**
Abstract base class for arbitrary-dimensional matrices holding objects or primitive data types such as <code>int</code>, <code>float</code>, etc.
First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
<p>
<b>Note that this implementation is not synchronized.</b>

@author wolfgang.hoschek@cern.ch
@version 1.0, 09/24/99
*/
public abstract class AbstractMatrix extends cern.colt.PersistentObject {
	protected boolean isNoView = true;
	//public static boolean debug = true;
/**
 * Makes this class non instantiable, but still let's others inherit from it.
 */
protected AbstractMatrix() {}
/**
 * Returns the number of dimensions (axes, rank) of this matrix.
 * For example a 2-dimensional matrix has rank 2.
 *
 * @return the number of dimensions of this matrix.
 */
public abstract int dimensions();
/**
 * Ensures that the receiver can hold at least the specified number of non-zero (non-null) cells without needing to allocate new internal memory.
 * If necessary, allocates new internal memory and increases the capacity of the receiver.
 * <p>
 * This default implementation does nothing.
 *
 * @param   minNonZeros   the desired minimum number of non-zero (non-null) cells.
 */
public void ensureCapacity(int minNonZeros) {}
/**
 * Returns whether the receiver is a view or not.
 */
protected boolean isView() {
	return ! this.isNoView;
}
/**
 * Returns an array filled with the size (extent) of each dimension.
 * Lets call the returned array <tt>shape</tt>.
 * There holds: <tt>shape.length==dimensions()</tt>,
 * <tt>shape[0]</tt> is the size in dimension <tt>0</tt>, ...,
 * <tt>shape[dimensions()-1]</tt> is the size in dimension <tt>dimensions()-1</tt>.
 */
public int[] shape() {
	int[] shape = new int[dimensions()];
	for (int i=dimensions(); --i >= 0; ) {
		shape[i] = shape(i);
	}
	return shape;
}
/**
 * Returns the size (extent) of the given dimension (axis, rank).
 * 
 * @dimension the index of the dimension. 0 indicates the dimension 0, 1 indicates the dimension 1, and so on.
 * @return the size in the given dimension.
 * @throws IllegalArgumentException if <tt>dimension<0 || dimension >= dimensions()</tt>.
 */
public abstract int shape(int dimension);
/**
 * Returns the number of cells.
 */
public abstract int size();
/**
 * Releases any superfluous internal memory. An application can use this operation to minimize the 
 * storage of the receiver.
 * <p>
 * This default implementation does nothing. Override this method if necessary.
 */
public void trimToSize() {}
}
