/*
 * @(#)TableModel.java	1.15 98/08/26
 *
 * Copyright 1997, 1998 by Sun Microsystems, Inc.,
 * 901 San Antonio Road, Palo Alto, California, 94303, U.S.A.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Sun Microsystems, Inc. ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Sun.
 */

package cern.colt.matrix.doublealgo;

/**
 *  The <B>TableModel</B> interface ispecifies the methods the JTable 
 *  will use to interrogate a tabular data model. <p>
 *
 *  The JTable can be set up to display any data model which implements the 
 *  TableModel interface with a couple of lines of code:  <p>
 *  <code>
 *  TableModel myData = new MyTableModel(); 
 *  JTable table = new JTable(myData);
 *  </code><p>
 *
 * @version 1.15 08/26/98
 * @author Philip Milne
 * @author Alan Chung
 * @see JTable
 * @see AbstractTableModel
 */
public Matrix2DModel extends javax.swing.table.AbstractTableModel {
	protected cern.colt.matrix.DoubleMatrix2D matrix;
	
	public Matrix2DModel(cern.colt.matrix.DoubleMatrix2D matrix) {
		this.matrix = matrix;
	}
/**
 * Returns the number of records managed by the data source object. A
 * <B>JTable</B> uses this method to determine how many rows it
 * should create and display.  This method should be quick, as it
 * is call by <B>JTable</B> quite frequently.
 *
 * @return the number or rows in the model
 * @see #getColumnCount
 */
public int getRowCount() {
	return this.matrix.rows();
}

/**
 * Returns the number of columns managed by the data source object. A
 * <B>JTable</B> uses this method to determine how many columns it
 * should create and display on initialization.
 *
 * @return the number or columns in the model
 * @see #getRowCount
 */
public int getColumnCount() {
	return this.matrix.columns();
}


/**
 * Returns the lowest common denominator Class in the column.  This is used
 * by the table to set up a default renderer and editor for the column.
 *
 * @return the common ancestor class of the object values in the model.
 */
public Class getColumnClass(int columnIndex) {
	return Double.class;
}


/**
 * Returns true if the cell at <I>rowIndex</I> and <I>columnIndex</I>
 * is editable.  Otherwise, setValueAt() on the cell will not change
 * the value of that cell.
 *
 * @param	rowIndex	the row whose value is to be looked up
 * @param	columnIndex	the column whose value is to be looked up
 * @return	true if the cell is editable.
 * @see #setValueAt
 */
public boolean isCellEditable(int rowIndex, int columnIndex) {
	return false;
}

/**
 * Returns an attribute value for the cell at <I>columnIndex</I>
 * and <I>rowIndex</I>.
 *
 * @param	rowIndex	the row whose value is to be looked up
 * @param	columnIndex 	the column whose value is to be looked up
 * @return	the value Object at the specified cell
 */
public Object getValueAt(int rowIndex, int columnIndex) {
	return new Double(this.matrix.get(rowIndex,columnIndex));
}

/**
 * Sets an attribute value for the record in the cell at
 * <I>columnIndex</I> and <I>rowIndex</I>.  <I>aValue</I> is
 * the new value.
 *
 * @param	aValue		 the new value
 * @param	rowIndex	 the row whose value is to be changed
 * @param	columnIndex 	 the column whose value is to be changed
 * @see #getValueAt
 * @see #isCellEditable
 */
public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
	this.matrix.set(rowIndex,columnIndex, ((Number)aValue).doubleValue());
}
}

