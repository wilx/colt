Matrix benchmark running on

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2.2                
java.vm.name    Classic VM           
os.name         SunOS                
os.version      5.6                  
os.arch         sparc                
java.version    1.2.2                
java.vendor     Sun Microsystems Inc.
java.vendor.url http://java.sun.com/ 


@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 51.772 50.154 51.737 33.182
i 33  | 51.329 50.99  76.9   52.794
z 66  | 35.023 36.847 37.283 34.711
e 100 | 34.336 33.956 35.841 39.197
  300 | 32.8   33.158 33.906 34.828

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
      | density
      | 0.0010       0.01    0.1    0.99 
-----------------------------------------
s 30  |  89.837       29.966 11.994 2.532
i 33  |  88.281       35.697 14.669 1.724
z 66  | 202.403       94.95  19.476 2.119
e 100 | 395.576      137.525 15.287 2.563
  300 |   1.261E+003 251.854 23.142 1.672

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 0.576  1.674 4.314 13.106
i 33  | 0.581  1.428 5.242 30.625
z 66  | 0.173  0.388 1.914 16.384
e 100 | 0.087  0.247 2.345 15.294
  300 | 0.026  0.132 1.465 20.824
Run took a total of Time=190.78 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 2.356  2.365 2.336 2.368
i 33  | 1.962  2.114 2.231 2.227
z 66  | 1.882  2.173 1.983 2.159
e 100 | 2.165  2.107 2.168 2.161
  300 | 2.059  2.155 1.902 1.749

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.532  0.512 0.457 0.277
i 33  | 0.532  0.512 0.464 0.218
z 66  | 0.457  0.509 0.458 0.234
e 100 | 0.473  0.506 0.449 0.246
  300 | 0.499  0.499 0.459 0.19 

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 4.426  4.617 5.113  8.558
i 33  | 3.691  4.131 4.807 10.227
z 66  | 4.117  4.268 4.332  9.227
e 100 | 4.574  4.164 4.827  8.794
  300 | 4.129  4.32  4.148  9.202
Run took a total of Time=156.383 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.383  1.428 1.329 1.447
i 33  | 1.246  1.355 1.355 1.359
z 66  | 1.342  1.344 1.339 1.334
e 100 | 1.338  1.344 1.267 1.322
  300 | 1.322  1.344 1.312 1.306

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.407  0.398 0.341 0.231
i 33  | 0.407  0.403 0.354 0.193
z 66  | 0.404  0.393 0.349 0.21 
e 100 | 0.395  0.4   0.348 0.224
  300 | 0.398  0.382 0.366 0.176

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 3.399  3.585 3.897 6.272
i 33  | 3.058  3.359 3.822 7.032
z 66  | 3.321  3.418 3.84  6.356
e 100 | 3.388  3.361 3.646 5.903
  300 | 3.318  3.519 3.587 7.406
Run took a total of Time=156.768 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  23.432  23.579 23.318 23.17 
i 33  |  49.397  30.667 20.509 19.953
z 66  | 110.442  63.632 24.201 25.161
e 100 | 149.674  73.202 28.417 28.014
  300 | 415.985 153.482 29.826 30.901

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  0.991  0.963 0.957 0.954
i 33  |  9.069  2.937 0.896 0.962
z 66  | 23.874  4.773 0.962 0.99 
e 100 | 34.688  7.835 0.955 0.986
  300 | 89.963 22.195 0.878 0.947

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 23.643 24.489 24.354 24.278
i 33  |  5.447 10.443 22.878 20.749
z 66  |  4.626 13.332 25.148 25.413
e 100 |  4.315  9.342 29.753 28.42 
  300 |  4.624  6.915 33.98  32.645
Run took a total of Time=255.438 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 14.055 11.811 11.808  8.851
i 33  | 11.278 11.688 12.652  9.56 
z 66  | 12.101 11.044 11.264 12.164
e 100 | 11.522 10.815 11.482 11.355
  300 |  8.874 11.992  9.643  9.188

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.294  0.295 0.291 0.29 
i 33  | 0.293  0.288 0.287 0.287
z 66  | 0.288  0.289 0.271 0.272
e 100 | 0.291  0.289 0.288 0.256
  300 | 0.29   0.281 0.278 0.259

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 47.884 40.015 40.572 30.536
i 33  | 38.448 40.631 44.068 33.283
z 66  | 41.966 38.162 41.513 44.702
e 100 | 39.612 37.386 39.905 44.33 
  300 | 30.608 42.695 34.745 35.493
Run took a total of Time=163.65 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01   0.1    0.99  
------------------------------------
s 30  |  10.959 10.344  7.155  6.484
i 33  |  11.936 11.422  7.349  7.211
z 66  |  26.202 24.006 12.98  12.146
e 100 |  39.614 35.744 18.242 15.512
  300 | 111.695 84.946 26.772 19.313

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  2.69   2.373 0.842 0.35 
i 33  |  2.881  2.572 0.801 0.425
z 66  |  6.08   4.758 0.928 0.312
e 100 |  8.776  6.667 1.149 0.209
  300 | 24.302 14.162 1.495 0.128

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1    0.99   
-----------------------------------
s 30  | 4.074  4.358  8.496  18.516
i 33  | 4.143  4.442  9.171  16.97 
z 66  | 4.31   5.045 13.991  38.911
e 100 | 4.514  5.362 15.877  74.13 
  300 | 4.596  5.998 17.912 150.903
Run took a total of Time=289.541 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  59.907  57.85  28.063 13.08 
i 33  |  67.151  66.249 29.912 13.619
z 66  | 149.959 136.9   27.42  16.078
e 100 | 235.1   223.537 22.283 18.962
  300 | 691.886 367.856 23.973 20.164

Performance of LUQuick.solve [Mflops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |  10.163 10.04  2.334 0.771
i 33  |  11.13  10.135 2.205 0.769
z 66  |  22.595 22.054 1.291 0.778
e 100 |  33.324 32.11  1.253 0.828
  300 | 101.129 18.813 0.872 0.767

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 5.894   5.762 12.022 16.969
i 33  | 6.033   6.536 13.565 17.699
z 66  | 6.637   6.207 21.243 20.677
e 100 | 7.055   6.962 17.787 22.905
  300 | 6.842  19.554 27.481 26.278
Run took a total of Time=311.988 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 10.108 10.092 10.216 10.149
i 33  | 10.09   8.99   9.281  9.989
z 66  |  9.178  9.189  9.436  9.588
e 100 |  9.416  9.144  9.333  8.816
  300 |  8.767  8.986  8.981  8.944

Performance of SOR [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.113  1.112 0.945 1.129
i 33  | 1.103  1.092 0.995 1.121
z 66  | 1.027  1.025 0.936 0.988
e 100 | 0.973  0.998 0.898 0.918
  300 | 0.901  0.92  0.839 0.886

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1    0.99  
----------------------------------
s 30  | 9.082  9.074 10.808  8.989
i 33  | 9.151  8.235  9.326  8.909
z 66  | 8.939  8.966 10.084  9.706
e 100 | 9.673  9.162 10.39   9.601
  300 | 9.729  9.769 10.703 10.098
Run took a total of Time=157.725 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  8.469  7.295  5.744  7.421
i 33  |  9.133  8.142  6.14   8.019
z 66  | 14.058 11.164  9.979 10.463
e 100 | 16.275 14.309 12.822 14.514
  300 | 24.198 17.787 17.671 18.977

Performance of Correlation [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.832  0.825 0.775 0.796
i 33  | 0.827  0.816 0.795 0.795
z 66  | 0.827  0.859 0.826 0.871
e 100 | 0.914  0.956 0.941 0.936
  300 | 0.79   0.899 0.872 0.926

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 10.174  8.839  7.412  9.318
i 33  | 11.039  9.979  7.725 10.088
z 66  | 16.995 12.993 12.081 12.016
e 100 | 17.814 14.968 13.628 15.513
  300 | 30.643 19.775 20.271 20.492
Run took a total of Time=251.812 secs. End of run.

Program execution took a total of 32.24245 minutes.
Good bye.
